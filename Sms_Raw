sms<- read.csv(file.choose())
attach(sms)
sms$type<- factor(sms$type)
str(sms)

install.packages("SnowballC")
library(SnowballC)
library(NLP)
library(tm)
library(tidyverse)
sms_corp<- VCorpus(VectorSource(sms$type))

##cleaning data
sms_dtm<- DocumentTermMatrix(sms_corp,control = list(tolower=TRUE,removeNumbers=TRUE,
                                                     stopwords=TRUE,removePunctuation=TRUE,
                                                     stemming=TRUE))
sms_dtm

##splitting the data
sms_dtm_train<- sms_dtm[1:4169,]
sms_dtm_test<- sms_dtm[4170:5559,]

sms_train_labels<- sms[1:4169,]$type
sms_test_labels<- sms[4170:5559,]$type

## To show results of training and testing
sms_train_labels %>%
  table %>%
  prop.table
##      ham =0.8647158     spam =0.1352842
  
sms_test_labels  %>%
  table %>%
  prop.table
##ham =0.8683453     spam =0.1316547

##Visualization of words 
library(wordcloud)

par(mfcol = c(1, 2))
spam <- sms %>%
  subset(type == "spam")
spamCloud <- wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))

ham <- sms %>%
  subset(type == "ham")
hamCloud <- wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
 

##indicating feature on frequently items
sms_dtm_freq_train <- sms_dtm_train %>%
  findFreqTerms(5) %>%
  sms_dtm_train[ , .]

sms_dtm_freq_test <- sms_dtm_test %>%
  findFreqTerms(5) %>%
  sms_dtm_test[ , .]

convert_counts <- function(x) {x <- ifelse(x > 0, "Yes", "No")}

sms_train <- sms_dtm_freq_train %>%
  apply(MARGIN = 2, convert_counts)

sms_test <- sms_dtm_freq_test %>%
  apply(MARGIN = 2, convert_counts)

##training model 
library(e1071)
sms_classify<- naiveBayes(sms_train,sms_train_labels)

##Testing
sms_pred <- predict(sms_classify, sms_test)

##Model performance
library(gmodels)
CrossTable(sms_pred, sms_test_labels, prop.chisq = FALSE, chisq = FALSE, 
           prop.t = FALSE,
           dnn = c("Predicted", "Actual"))

mean(sms_pred==sms_test_labels)

##Improving Model Performnce
sms_classify_2 <- naiveBayes(sms_train, sms_train_labels, laplace = 1)
sms_pred2 <- predict(sms_classify_2, sms_test)
CrossTable(sms_pred2, sms_test_labels, prop.chisq = FALSE, chisq = FALSE, 
           prop.t = FALSE,
           dnn = c("Predicted", "Actual"))
